using UnityEngine;
using UnityEngine.Pool;

public class CubeSpawner : MonoBehaviour
{
    [SerializeField] private Cube _cube;
    [SerializeField] private GameObject _startPoint;
    [SerializeField] private float _repeatRate = 1f;
    [SerializeField] private int _poolCapacity = 5;
    [SerializeField] private int _poolMaxSize = 5;
    [SerializeField] private bool _usePool;

    private ObjectPool<Cube> _pool;

    private void Start()
    {
        _pool = new ObjectPool<Cube>(() =>
        {
            return Instantiate(_cube);
        }, cube =>
        {
            cube.gameObject.SetActive(true);
        }, cube =>
        {
            cube.ResetColor();
            cube.gameObject.SetActive(false);
        }, cube =>
        {
            Destroy(cube.gameObject);
        }, false, _poolCapacity, _poolMaxSize);

        InvokeRepeating(nameof(Spawn), 0.0f, _repeatRate);
    }

    private void Spawn()
    {
        Cube cube = _usePool ? _pool.Get() : Instantiate(_cube);
        float randomX = 36f;
        float randomY = 15f;
        float randomZ = Random.Range(-15f, 5f);
        cube.transform.position = new Vector3(randomX, randomY, randomZ);
        cube.GetComponent<Rigidbody>().velocity = Vector3.zero;
        cube.Initialize(this);
    }

    public void KillShape(Cube cube)
    {
        _pool.Release(cube);
    }
}
